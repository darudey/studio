rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
      allow write: if request.auth.uid == userId;
    }

    match /products/{productId} {
      allow read;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }

    match /coupons/{couponId} {
      // Any authenticated user can query for coupons and read their data.
      // This is needed to find the coupon by its code. The codes are non-guessable.
      allow list, read: if request.auth != null;
      
      // Rule to redeem (update) a coupon.
      allow update: if request.auth != null
                    // The coupon must not have been used before.
                    && resource.data.isUsed == false
                    // The update must mark the coupon as used.
                    && request.resource.data.isUsed == true
                    // The 'usedBy' field must be set to the current user's ID.
                    && request.resource.data.usedBy == request.auth.uid
                    // Ensure other critical fields are not being modified.
                    && request.resource.data.code == resource.data.code
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.createdAt == resource.data.createdAt
                    && request.resource.data.createdBy == resource.data.createdBy;
                    
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
    }

    match /orders/{orderId} {
      allow read, create: if request.auth.uid == request.resource.data.userId;
      allow list, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }
  }
}
