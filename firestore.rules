
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules reusable and readable
    function isAuth() {
      return request.auth != null;
    }

    function isUserId(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserRole(userId) {
      // Use .get() to read another document's data within your rules
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isAdmin() {
      return isAuth() && getUserRole(request.auth.uid) in ['developer', 'shop-owner'];
    }
    
    function isDeveloper() {
        return isAuth() && getUserRole(request.auth.uid) == 'developer';
    }
    
    // An 'imager' is a role that can manage products (including images)
    function isImager() {
        return isAuth() && getUserRole(request.auth.uid) in ['developer', 'shop-owner', 'imager'];
    }

    // --- Collection Rules ---

    // USERS Collection
    // Users can read and update their own profile.
    // Developers can view any user's profile for administrative purposes.
    // Any authenticated user can create their own user document upon registration.
    match /users/{userId} {
      allow read: if isUserId(userId) || isDeveloper();
      allow update: if isUserId(userId) || isDeveloper();
      allow create: if isUserId(userId);
      allow list: if isDeveloper(); // Only developers can list all users.
    }

    // PRODUCTS Collection
    // Anyone, including unauthenticated visitors, can read product information.
    // Users with 'imager', 'shop-owner', or 'developer' roles can create, update, and delete products.
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isImager();
    }

    // ORDERS Collection
    // Users can only read their own orders.
    // Admins (shop-owners/developers) can read any order to manage them.
    // Users can only create orders for themselves.
    // Admins can update orders (e.g., to change status from 'Pending' to 'Shipped').
    match /orders/{orderId} {
      allow read: if isUserId(resource.data.userId) || isAdmin();
      allow create: if isUserId(request.resource.data.userId);
      allow update: if isAdmin();
      allow list: if isAdmin(); // Allows admins to query and list all orders for their dashboards.
    }
    
    // COUPONS Collection
    // Creating, reading, and updating coupons is restricted to developers only.
    // This is a highly sensitive administrative operation.
    match /coupons/{couponId} {
        allow read, create, update: if isDeveloper();
    }

    // NOTIFICATIONS Collection
    // A user can read or update their own notifications (e.g., to mark them as read).
    // An admin can create a notification (e.g., for order status updates).
    // The 'list' rule is crucial for allowing a user to query for all of their notifications.
    match /notifications/{notificationId} {
        allow read, update: if isUserId(resource.data.userId);
        allow create: if isAdmin();
        allow list: if isAuth() && request.query.where[0] == ["userId", "==", request.auth.uid];
    }
  }
}
