rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUser(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isDeveloper() {
      return isUser(request.auth.uid) && getUserRole(request.auth.uid) == 'developer';
    }
    function isShopOwner() {
      return isUser(request.auth.uid) && getUserRole(request.auth.uid) == 'shop-owner';
    }

    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow get, list: if isDeveloper() || isShopOwner();
    }
    
    match /products/{productId} {
      allow read;
      allow write: if isDeveloper() || isShopOwner();
    }

    match /orders/{orderId} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update: if isOwner(resource.data.userId) || isDeveloper() || isShopOwner();
    }

    match /coupons/{couponId} {
      allow create: if isDeveloper();
      allow list, read: if request.auth != null;
      
      // A user can UPDATE a coupon document IF:
      // 1. The coupon is not already used.
      // 2. The update is ONLY to set 'isUsed' to true and 'usedBy' to their own UID.
      // 3. All other important fields must remain unchanged.
      allow update: if resource.data.isUsed == false &&
                       request.resource.data.isUsed == true &&
                       request.resource.data.usedBy == request.auth.uid &&
                       request.resource.data.code == resource.data.code &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.createdBy == resource.data.createdBy;
    }
  }
}
