
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read any profile, update their own (but not their role), and create their own.
    match /users/{userId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == userId;
      // A user can update their own profile, but cannot change their role.
      // The server-side redeemCoupon flow, using the Admin SDK, bypasses this rule to change the role.
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.role == resource.data.role;
    }

    // Products can be read by anyone, but only managed by developers/shop-owners.
    match /products/{productId} {
      allow read;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }

    // Users can create/read their own orders. Admins can manage all orders.
    match /orders/{orderId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow list, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }

    // Coupons are managed entirely by the server.
    // Clients cannot read or write them directly. This is secure because the redeemCoupon
    // flow uses the Admin SDK, which bypasses these rules.
    match /coupons/{couponId} {
      allow read, update: if false;
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
    }
  }
}
