
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Check if the user is a developer or shop-owner by reading their profile
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }

    match /users/{userId} {
      // Users can read and update their own profile
      allow read, update: if request.auth.uid == userId;
      // Admins can read and list all user profiles
      allow get, list: if isAdmin();
    }

    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      // Admins can create, update, and delete products
      allow write: if isAdmin();
    }
    
    match /orders/{orderId} {
      // Users can create their own orders
      allow create: if request.auth.uid == request.resource.data.userId;
      
      // A user can get their own order, an admin can get any order.
      allow get: if request.auth.uid == resource.data.userId || isAdmin();
      
      // Only admins can update an order (e.g., change status)
      allow update: if isAdmin();
      
      // Any authenticated user can list orders for trending products calculation.
      // This is safe because it only grants permission to list, not to read documents' data.
      // The app logic itself fetches the data, and 'get' operations are secured above.
      allow list: if request.auth != null;
    }
    
    match /coupons/{couponId} {
      // Any authenticated user can read a coupon (to check it)
      allow read: if request.auth != null;
      // Admins can create coupons
      allow create: if isAdmin();
      // Any authenticated user can update a coupon from unused to used
      allow update: if request.auth != null && resource.data.isUsed == false && request.resource.data.isUsed == true;
    }
  }
}
