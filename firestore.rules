rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // A user can read/write their own document.
    // Admins can get any user document.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
      allow get: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }

    // Anyone can read products.
    // Admins can write products.
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }

    // A user can create their own orders.
    // A user or an admin can read an order.
    // Admins can list and update any order.
    match /orders/{orderId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if request.auth.uid == resource.data.userId || (request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner']);
      allow list, update: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['developer', 'shop-owner'];
    }
    
    // Any logged-in user can query for coupons.
    // Developers can create coupons.
    // Any logged-in user can 'use' a coupon once.
    match /coupons/{couponId} {
      allow list, read: if request.auth.uid != null;
      allow create: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'developer';
      
      // Allow a user to update a coupon only to mark it as used.
      allow update: if request.auth.uid != null
                    && resource.data.isUsed == false
                    && request.resource.data.isUsed == true
                    && request.resource.data.usedBy == request.auth.uid
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isUsed', 'usedBy']);
    }
  }
}
