rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    // users
    match /users/{userId} {
      // Any authenticated user can create their own profile during signup.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can only read or update their own data.
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Only developers can list all users.
      allow list: if request.auth != null && getUserData(request.auth.uid).role == 'developer';
    }

    // products
    match /products/{productId} {
      // Anyone can read products.
      allow read: if true;
      // Admins (developers or shop-owners) can create, update, or delete products.
      allow write: if request.auth != null && getUserData(request.auth.uid).role in ['developer', 'shop-owner'];
    }

    // orders
    match /orders/{orderId} {
      // Any authenticated user can create their own order.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // A user can read their own order. An admin can read any order.
      allow get: if request.auth != null && (request.auth.uid == resource.data.userId || getUserData(request.auth.uid).role in ['developer', 'shop-owner']);
      // Admins can update any order (e.g., to change status).
      allow update: if request.auth != null && getUserData(request.auth.uid).role in ['developer', 'shop-owner'];
       // Admins can list all orders for management purposes.
      allow list: if request.auth != null && getUserData(request.auth.uid).role in ['developer', 'shop-owner'];
    }
    
    // coupons
    match /coupons/{couponId} {
      // Any logged-in user can look up a coupon by its code to redeem it.
      allow get, list: if request.auth != null;
      // Only developers can create new coupons.
      allow create: if request.auth != null && getUserData(request.auth.uid).role == 'developer';
      // A user can update a coupon only to mark it as used by them.
      allow update: if request.auth != null
                    && request.resource.data.isUsed == true
                    && request.resource.data.usedBy == request.auth.uid
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isUsed', 'usedBy']);
    }
  }
}
