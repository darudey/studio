
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserRole() {
      // Helper to get the role of the currently signed-in user.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuth() && getUserRole() in ['developer', 'shop-owner'];
    }
    
    function isDeveloper() {
      return isAuth() && getUserRole() == 'developer';
    }

    // Users can only manage their own profile. Admins can read all profiles.
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId);
      allow delete: if false; // Disallow deleting users from the client.
    }

    // Products are public to read, but only admins can create, update, or delete.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Users can create and read their own orders. Admins can read/update all orders.
    match /orders/{orderId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false; // Disallow deleting orders from the client.
    }
    
    // Coupons can be redeemed by any user, but only created by developers.
    match /coupons/{couponId} {
      // Any authenticated user can query for a specific coupon code.
      allow read: if isAuth();

      // Only developers can create new coupons.
      allow create: if isDeveloper();

      // A user can update a coupon only to mark it as used by them.
      allow update: if isAuth() &&
                   resource.data.isUsed == false &&
                   request.resource.data.isUsed == true &&
                   request.resource.data.usedBy == request.auth.uid &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isUsed', 'usedBy']);
      
      allow delete: if false; // Disallow deleting coupons from the client.
    }
  }
}
